// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.13.0
// source: proto/client_streaming_service.proto

package pb_generated

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// ClientStreamingServiceClient is the client API for ClientStreamingService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ClientStreamingServiceClient interface {
	Average(ctx context.Context, opts ...grpc.CallOption) (ClientStreamingService_AverageClient, error)
}

type clientStreamingServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewClientStreamingServiceClient(cc grpc.ClientConnInterface) ClientStreamingServiceClient {
	return &clientStreamingServiceClient{cc}
}

func (c *clientStreamingServiceClient) Average(ctx context.Context, opts ...grpc.CallOption) (ClientStreamingService_AverageClient, error) {
	stream, err := c.cc.NewStream(ctx, &ClientStreamingService_ServiceDesc.Streams[0], "/pb_generated.ClientStreamingService/Average", opts...)
	if err != nil {
		return nil, err
	}
	x := &clientStreamingServiceAverageClient{stream}
	return x, nil
}

type ClientStreamingService_AverageClient interface {
	Send(*NumberRequest) error
	CloseAndRecv() (*AverageResponse, error)
	grpc.ClientStream
}

type clientStreamingServiceAverageClient struct {
	grpc.ClientStream
}

func (x *clientStreamingServiceAverageClient) Send(m *NumberRequest) error {
	return x.ClientStream.SendMsg(m)
}

func (x *clientStreamingServiceAverageClient) CloseAndRecv() (*AverageResponse, error) {
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	m := new(AverageResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// ClientStreamingServiceServer is the server API for ClientStreamingService service.
// All implementations must embed UnimplementedClientStreamingServiceServer
// for forward compatibility
type ClientStreamingServiceServer interface {
	Average(ClientStreamingService_AverageServer) error
	mustEmbedUnimplementedClientStreamingServiceServer()
}

// UnimplementedClientStreamingServiceServer must be embedded to have forward compatible implementations.
type UnimplementedClientStreamingServiceServer struct {
}

func (UnimplementedClientStreamingServiceServer) Average(ClientStreamingService_AverageServer) error {
	return status.Errorf(codes.Unimplemented, "method Average not implemented")
}
func (UnimplementedClientStreamingServiceServer) mustEmbedUnimplementedClientStreamingServiceServer() {
}

// UnsafeClientStreamingServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ClientStreamingServiceServer will
// result in compilation errors.
type UnsafeClientStreamingServiceServer interface {
	mustEmbedUnimplementedClientStreamingServiceServer()
}

func RegisterClientStreamingServiceServer(s grpc.ServiceRegistrar, srv ClientStreamingServiceServer) {
	s.RegisterService(&ClientStreamingService_ServiceDesc, srv)
}

func _ClientStreamingService_Average_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(ClientStreamingServiceServer).Average(&clientStreamingServiceAverageServer{stream})
}

type ClientStreamingService_AverageServer interface {
	SendAndClose(*AverageResponse) error
	Recv() (*NumberRequest, error)
	grpc.ServerStream
}

type clientStreamingServiceAverageServer struct {
	grpc.ServerStream
}

func (x *clientStreamingServiceAverageServer) SendAndClose(m *AverageResponse) error {
	return x.ServerStream.SendMsg(m)
}

func (x *clientStreamingServiceAverageServer) Recv() (*NumberRequest, error) {
	m := new(NumberRequest)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// ClientStreamingService_ServiceDesc is the grpc.ServiceDesc for ClientStreamingService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var ClientStreamingService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "pb_generated.ClientStreamingService",
	HandlerType: (*ClientStreamingServiceServer)(nil),
	Methods:     []grpc.MethodDesc{},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "Average",
			Handler:       _ClientStreamingService_Average_Handler,
			ClientStreams: true,
		},
	},
	Metadata: "proto/client_streaming_service.proto",
}
